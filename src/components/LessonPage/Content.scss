//////////////////////////////////////////////
// The code below was originally copied from
// codeclub_lesson_builder/styles/main.less
// and
// codeclub_lesson_builder/styles/lesson.less
//////////////////////////////////////////////
@import '../../../node_modules/highlight.js/styles/idea';
@import '../../styles/variables';
@import '../../../node_modules/bootstrap-sass/assets/stylesheets/bootstrap/mixins';
@import '../../../node_modules/bootstrap-sass/assets/stylesheets/bootstrap/tables';

$checkbox-blue: #abdbea;

@mixin styledList {
  ul,
  ol {
    padding: 0;
    margin: 0 0 20px;
  }
  ul.task-list li.task-list-item::before {
    opacity: 0;
  }
  li {
    break-inside: avoid;
    list-style: none;
    margin-left: 45px;
  }
  li::before {
    content: " ";
    border-radius: 20px;
    border: 3px solid $checkbox-blue;
    padding: 8px;
    float: left;
    margin-left: -40px;
    margin-top: 2px;
  }
  label {
    font-weight: normal;
    margin-left: 6px;
  }
}

@mixin headingStyle {
  color: #fff !important;
  background: #349946 !important;
  padding: 10px;
  border-radius: 5px;
}

.lessonContent {

  .check,
  .activity,
  .save {
    @include styledList;
  }

  // scratch code blocks
  pre.blocks,
  code.b {
    background-color: inherit;
    border: 0;
  }

  // code blocks
  pre > code {
    // override hljs background
    background-color: transparent;
  }

  // sections
  section.activity {
    // activities, "Step 1: Bla bla"
    h1 {
      @include headingStyle;
    }
    .subsection h2 {
      @include styledList;
      @include headingStyle;
      font-weight: 300;
    }
  }

  section.check {
    // check lists
    h2 {
      padding-top: 4px;
      padding-bottom: 9px;

      img {
        height: 40px;
        vertical-align: text-bottom;
        padding-right: 10px;
      }
    }
  }

  section.try {
    background: #abdbea !important;
    border-radius: 10px;
    padding: 1px 20px 10px;
    code {
      background-color: #fff !important;
      color: #007cc9 !important;
    }
    li::before {
      border: 3px solid #fff;
    }
  }

  section.protip,
  section.tip {
    border: 3px solid #ff7f00;
    background: #fff99d !important;
    border-radius: 12px;
    padding: 0 20px 20px;
    margin-top: 20px;
    margin-bottom: 20px;
  }

  section.flag {
    border-top: 3px dotted rgb(230, 134, 45);
    padding-bottom: 20px;
    margin-top: 20px;
    margin-bottom: 20px;
    h2 {
      color: rgb(54, 161, 55) !important;
      margin-top: 10px;
      margin-bottom: 10px;
      padding-top: 15px;
      padding-bottom: 10px;

      img {
        height: 40px;
        vertical-align: text-bottom;
        padding-right: 10px;
      }
    }
  }

  section.save {
    border-top: 3px solid rgb(36, 90, 154);
    margin: 20px 0;
    h2 {
      color: rgb(36, 90, 154) !important;
      margin: 0;
      padding-top: 10px;
      padding-bottom: 20px;

      img {
        height: 40px;
        vertical-align: text-bottom;
        padding-right: 10px;
      }
    }
  }

  section.challenge {
    border: 3px solid #00b1da;
    border-radius: 12px;
    padding-bottom: 10px;
    margin-top: 20px;
    margin-bottom: 20px;
    h2 {
      color: #fff !important;
      background: #00b1da !important;
      padding-left: 20px;
      padding-top: 10px;
      padding-bottom: 10px;
      margin-top: 0;
    }
    > * {
      padding: 0 20px;
    }
  }

  // manual colors for scratch and microbit code
  // example: Press `motion`{.blockmotion} ...  They must be !important
  // to override the bootstrap print style sheet
  code {
    &.blockmotion { background-color: #4c97ff !important; }
    &.blocklooks { background-color: #96f !important; }
    &.blocksound { background-color: #cf63cf !important; }
    &.blockpen { background-color: #0fbd8c !important; }
    &.blockdata { background-color: #ff8c1a !important; }
    &.blockevents { background-color: #ffbf00 !important; }
    &.blockcontrol { background-color: #ffab19 !important; }
    &.blocksensing { background-color: #5cb1d6 !important; }
    &.blockoperators { background-color: #59c059 !important; }
    &.blockmoreblocks { background-color: #ff6680 !important; }

    &.microbitbasic { background-color: #1e90ff !important; }
    &.microbitinput { background-color: #d400d4 !important; }
    &.microbitmusic { background-color: #e63022 !important; }
    &.microbitled { background-color: #5c2d91 !important; }
    &.microbitradio { background-color: #e3008c !important; }
    &.microbitloops { background-color: #0a0 !important; }
    &.microbitlogic { background-color: #00a4a6 !important; }
    &.microbitvariables { background-color: #dc143c !important; }
    &.microbitmath { background-color: #9400d3 !important; }
    &.microbitfunctions { background-color: #3455db !important; }
    &.microbitarrays { background-color: #e65722 !important; }
    &.microbittext { background-color: #b8860b !important; }
    &.microbitgame { background-color: #007a4b !important; }
    &.microbitimages { background-color: #7600a8 !important; }
    &.microbitpins { background-color: #b22222 !important; }
    &.microbitserial { background-color: #002050 !important; }
    &.microbitcontrol { background-color: #333 !important; }

    &.blockmotion,
    &.blocklooks,
    &.blocksound,
    &.blockpen,
    &.blockdata,
    &.blockevents,
    &.blockcontrol,
    &.blocksensing,
    &.blockoperators,
    &.blockmoreblocks,
    &.microbitbasic,
    &.microbitinput,
    &.microbitmusic,
    &.microbitled,
    &.microbitradio,
    &.microbitloops,
    &.microbitlogic,
    &.microbitvariables,
    &.microbitmath,
    &.microbitfunctions,
    &.microbitarrays,
    &.microbittext,
    &.microbitgame,
    &.microbitimages,
    &.microbitpins,
    &.microbitserial,
    &.microbitcontrol {
      color: #fff !important;
    }
  }

  //// tables
  table {
    // add table class to all tables, assumes that tables are only used
    // for listing stuff and is not in use for other components like calendars
    @extend .table;
  }

  // horisontal scroll on screens, do not wrap
  // not keyword negate _whole_ media query,
  // making `(not print) and (min-width: @screen-sm)` impossible
  @media aural, braille, handheld, projection, screen, tty, tv, embossed {
    pre > code {
      word-wrap: normal;
      white-space: pre;
    }
  }

  // embedded videos
  .video-container {
    position: relative;
    padding-bottom: 56.25%; // 16:9
    height: 0;
    overflow: hidden;
    margin: 30px 0 60px;
    iframe {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
    }
  }

  input[type="checkbox"] {
    position: absolute;
    opacity: 0;
  }

  input[type="checkbox"] + label {
    position: relative;
    font-weight: normal;
    margin-left: 0;
  }

  input[type="checkbox"] + label::before {
    content: '\a0'; // non-breaking space
    display: inline-block;
    visibility: visible;
    width: 1.3em;
    height: 1.3em;
    margin: 0 0.6em 0 -2.2em;
    line-height: 1.1em;
    border: 3px solid $checkbox-blue;
    border-radius: 3px;
  }

  input[type="checkbox"]:checked + label::before {
    content: '\2714'; // checkmark
    line-height: 1.1em;
    padding-left: 0.1em;
  }

  input[type="checkbox"]:active + label::before,
  input[type="checkbox"]:focus + label::before {
    background: darken($checkbox-blue, 20%);
  }
}
